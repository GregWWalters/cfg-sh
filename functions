# POSIX-compliant shell functions
#
# These aim to be compatible with zsh, bash, and sh.
# Some depend on Gnu versions of utilities which are assumed to be found in the
# path without a 'g' prefix.

# shellquote wraps a string in quotes (escaping quotes inside the string) so
# it can be safely passed to other commands
shellquote() {
	printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
}

# testInteger returns an error status if the argument cannot be used as an
# integer
testInteger() {
	[ -n "$1" -a  "$1" -eq "$1" ] 2>/dev/null
}

# termWidth outputs the number of columns in the terminal or returns an error
# status if it cannot
termWidth() {
	if which tput &>/dev/null; then
		w=$(tput cols)
	elif which stty &>/dev/null; then
		w=$(stty size | cut -d ' ' -f2)
	else
		return 1
	fi
	echo $w
}

# indent wraps long strings on words and optionally
# 1) pads the left margin by the first argument, if an integer
# 2) constrains the text width the the second argument, if an integer
# Usage: indent [4] [80] $(cat README.txt)
indent() {
	if testInteger $1; then space=$1; shift; else space=0; fi
	if testInteger $1; then width=$1; shift; else p="$*"; width=${#p}; fi
	[ $# -gt 0 ] && echo $@ | fold -s -w $width | pr -to $space
}

# Print command line examples for argument to stdout
cmdfu() {
	curl "https://www.commandlinefu.com/commands/matching/$@/`echo -n $@ \
		| openssl base64`/YXdr/plaintext" --silent \
		| sed "s/\(^#.*\)/\x1b[32m\1\x1b[0m/g" \
		| less -R
}


# Open a google search for arguments in lynx
google() {
	lynx -accept-all-cookies "https://www.google.com/search?q=${*// /%20}"
}

# Open a Wikipedia article for argument in lynx
wiki() {
	lynx -accept-all-cookies "http://en.wikipedia.org/wiki/Special:Search?search=${*// /+}"
}

# Create a histogram of command line history
histhist() {
	history \
		| awk '{print $2}' \
		| sort | uniq -c \
		| sort -rn | head -20 \
		| awk '!max{max=$1;}{r="";i=s=60*$1/max;while(i-->0)r=r"#";printf "%15s %5d %s %s",$2,$1,r,"\n";}'
}

# csview displays a CSV file in $(less) with line numbers and no line wrapping
csview() {
	file="$1"
	cat "$file" | sed -e 's/,,/, ,/g' | column -s, -t | less -#.1 -N -S
}

# Change the title displayed by the terminal
title() {
	name="$*"
	export PROMPT_COMMAND="echo -ne \"\\033]0;$name\\007\""
}

# Open clipboard contents in a text editor, then save them back to the clipboard.
# Currently MacOS-only. TODO: add other clipboard systems
scratch() {
  filename="/tmp/scratch_$(date -u '+%4Y%m%d%H%M%S')"
  if [ -s $filename ]; then
    echo >&2 "scratch file already in use! Save $filename or delete"
    return 1
  fi
  pbpaste > $filename
  ${EDITOR} $filename
  pbcopy < $filename
  rm $filename
  unset filename
  return 0
}

# findOnPort shows the process(es) running on ports given as arguments, or
# else checks ports 80, 8080, 443, 3000-3009, and 3030
# Usage: findOnPort [<port> [...]]
findOnPort() (
  # this function requires GNU awk. If installed as 'gawk', alias it.
  _awk='awk'
  if which gawk &>/dev/null; then _awk=gawk; fi

  # this function requires GNU sed. If installed as 'gsed', alias it.
  _sed='sed'
  if which gsed &>/dev/null; then _sed=gsed; fi

  # joinWithDelim is a formatting helper that takes a delimiter as its first
  # argument and a list of items to join, separated by that delimiter.
  joinWithDelim() {
    if [ $# -lt 3 ]; then print "$2"; return 0; fi
    d=${1-} f=${2-}
    if shift 2; then
      # printf %s "$f" "${@/#/$d}"
      str="$f"
      for word in $@; do
        str="$str$d$word"
      done
      printf %s "$str"
    fi
    return 0
  }

  # processPairs is a helper that takes the port and PID pairs, delimited by
  # ':', and returns a table of process information: process ID, username,
  # process start time, and the command and arguments that started it.
  processPairs() {
    columnsRE='^ *([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +(.+?) *$'
    echo "Port;PID;User;Started;Command"
    for pair in $@; do
      port=${pair%%:*}
      pid=${pair##*:}
      echo "${port} $(ps -o pid,logname,start,command -p "$pid" | tail -n +2)" \
        | $_sed -E "s/${columnsRE}/\1;\2;\3;\4;\5/"
      done
      return 0
    }

  # Construct a regexp for the list of ports given, or for the default ports
  ports="80 8080 443 '300[0-9]' 3030"
  if [ $# -gt 0 ]; then ports=( "$@" ); fi
  search=$(eval "joinWithDelim '|' $ports")
  portsRE="\.(${search})$"

  # Get matched ports in use and the PIDs using them as <PORT>:<PID>
  pairs=
  for pair in ` netstat -vanp tcp \
    | $_awk "BEGIN{OFS=\":\"}{ match(\\\$4, /$portsRE/, c); if( length(c) > 0 ) print c[1],\\\$9 }" `; do
      pairs="$pairs $pair"
    done

  # Exit here if no searched ports are in use
  if [ -z "$pairs" ]; then
    echo "No processes found on port(s) $(eval "joinWithDelim ', ' $ports")"
    return 0
  fi

  # Print the process information per port
  # (may repeat processes if a process is listening on multiple ports)
  eval "processPairs $pairs" | column -s=';' -t
)

# deleteOrig finds and deletes the '.orig' files left behind by Git after a
# merge conflict
deleteOrig() {
  find . -type f -name '*.orig' -delete
}

# vim: ft=sh
